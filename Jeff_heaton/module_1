
# You can mix strings and variables for printing. This technique is called a formatted or interpolated string. 
# The variables must be inside of the curly braces.
a = 10
print(f"The value of a is {a}")
print("a is {}".format(a))

# Iterate over a collection, and know where your index.  (Python is zero-based!)
l = ["a", "b", "c", "d"]
for i, l in enumerate(l):
    print(f"{i}:{l}")

# set
s = set()
s = {"a", "b", "c"}
s = set(["a", "b", "c"])
print(s)

# Be careful that you do not attempt to access an undefined key, as this will result in an error. 
# You can check to see if a key is defined: if "age" in d:
# You can also access the dictionary and provide a default value, as the following code demonstrates.
d.get("unknown_key", "default")

# Two lists can be combined into a single list by the zip command.
a = [1, 2, 3, 4, 5]
b = [5, 4, 3, 2, 1]
for x, y in zip(a, b):
    print(f"{x} - {y}")

f = lambda x: x if x < 5 else 5
a = [2, 10, 3, 11, 10, 3, 2, 1]
[f(x) for x in a]

#to build up an index to symbolic column names.
text = ["col-zero", "col-one", "col-two", "col-three"]
lookup = {key: value for (value, key) in enumerate(text)}
print(f'The index of "col-two" is {lookup["col-two"]}')

# The map function takes a list and applies a function to each member of the list and 
# returns a second list that is the same size as the first.
def process_string(str):
    t = str.strip()
    return t[0].upper() + t[1:]
l = ["   apple  ", "pear ", "orange", "pine apple  "]
l2 = list(map(process_string, l))
l3 = [process_string(x) for x in l]


